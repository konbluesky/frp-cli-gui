package ui

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// FilePickerMode Êñá‰ª∂ÈÄâÊã©Âô®Ê®°Âºè
type FilePickerMode int

const (
	FilePickerModeFile FilePickerMode = iota // ÈÄâÊã©Êñá‰ª∂
	FilePickerModeDir                        // ÈÄâÊã©ÁõÆÂΩï
	FilePickerModeBoth                       // Êñá‰ª∂ÂíåÁõÆÂΩïÈÉΩÂèØÈÄâÊã©
)

// FileItem Êñá‰ª∂È°π
type FileItem struct {
	Name    string
	Path    string
	IsDir   bool
	Size    int64
	ModTime string
}

// FilePickerResult Êñá‰ª∂ÈÄâÊã©ÁªìÊûú
type FilePickerResult struct {
	Selected bool
	Path     string
	IsDir    bool
}

// filePickerResultMsg Êñá‰ª∂ÈÄâÊã©ÁªìÊûúÊ∂àÊÅØ
type filePickerResultMsg FilePickerResult

// FilePicker Êñá‰ª∂ÈÄâÊã©Âô®ÁªÑ‰ª∂
type FilePicker struct {
	title       string
	mode        FilePickerMode
	currentPath string
	items       []FileItem
	selectedIdx int
	width       int
	height      int
	visible     bool
	showHidden  bool
	extensions  []string // ÂÖÅËÆ∏ÁöÑÊñá‰ª∂Êâ©Â±ïÂêçÔºà‰∏∫Á©∫Ë°®Á§∫ÊâÄÊúâÊñá‰ª∂Ôºâ
}

// NewFilePicker ÂàõÂª∫Êñá‰ª∂ÈÄâÊã©Âô®
func NewFilePicker(title string, mode FilePickerMode) *FilePicker {
	currentDir, _ := os.Getwd()

	fp := &FilePicker{
		title:       title,
		mode:        mode,
		currentPath: currentDir,
		selectedIdx: 0,
		visible:     false,
		showHidden:  false,
	}

	fp.loadDirectory()
	return fp
}

// SetExtensions ËÆæÁΩÆÂÖÅËÆ∏ÁöÑÊñá‰ª∂Êâ©Â±ïÂêç
func (fp *FilePicker) SetExtensions(extensions []string) {
	fp.extensions = extensions
	fp.loadDirectory()
}

// Show ÊòæÁ§∫Êñá‰ª∂ÈÄâÊã©Âô®
func (fp *FilePicker) Show() tea.Cmd {
	fp.visible = true
	fp.loadDirectory()
	return nil
}

// Hide ÈöêËóèÊñá‰ª∂ÈÄâÊã©Âô®
func (fp *FilePicker) Hide() {
	fp.visible = false
}

// IsVisible Ê£ÄÊü•ÊòØÂê¶ÂèØËßÅ
func (fp *FilePicker) IsVisible() bool {
	return fp.visible
}

// SetSize ËÆæÁΩÆÂ§ßÂ∞è
func (fp *FilePicker) SetSize(width, height int) {
	fp.width = width
	fp.height = height
}

// SetStartPath ËÆæÁΩÆËµ∑ÂßãË∑ØÂæÑ
func (fp *FilePicker) SetStartPath(path string) {
	if path != "" {
		fp.currentPath = path
		fp.loadDirectory()
		fp.selectedIdx = 0
	}
}

// loadDirectory Âä†ËΩΩÁõÆÂΩïÂÜÖÂÆπ
func (fp *FilePicker) loadDirectory() {
	fp.items = []FileItem{}

	// Ê∑ªÂä†‰∏äÁ∫ßÁõÆÂΩïÈ°πÔºàÈô§ÈùûÂú®Ê†πÁõÆÂΩïÔºâ
	if fp.currentPath != "/" && fp.currentPath != "" {
		parent := filepath.Dir(fp.currentPath)
		if parent != fp.currentPath {
			fp.items = append(fp.items, FileItem{
				Name:  "..",
				Path:  parent,
				IsDir: true,
			})
		}
	}

	// ËØªÂèñÂΩìÂâçÁõÆÂΩï
	entries, err := os.ReadDir(fp.currentPath)
	if err != nil {
		return
	}

	var dirs, files []FileItem

	for _, entry := range entries {
		// Ë∑≥ËøáÈöêËóèÊñá‰ª∂ÔºàÈô§ÈùûÊòæÁ§∫ÈöêËóèÊñá‰ª∂Ôºâ
		if !fp.showHidden && strings.HasPrefix(entry.Name(), ".") {
			continue
		}

		info, err := entry.Info()
		if err != nil {
			continue
		}

		item := FileItem{
			Name:    entry.Name(),
			Path:    filepath.Join(fp.currentPath, entry.Name()),
			IsDir:   entry.IsDir(),
			Size:    info.Size(),
			ModTime: info.ModTime().Format("2006-01-02 15:04"),
		}

		if entry.IsDir() {
			dirs = append(dirs, item)
		} else {
			// Ê£ÄÊü•Êñá‰ª∂Êâ©Â±ïÂêç
			if len(fp.extensions) > 0 {
				ext := strings.ToLower(filepath.Ext(entry.Name()))
				allowed := false
				for _, allowedExt := range fp.extensions {
					if ext == strings.ToLower(allowedExt) {
						allowed = true
						break
					}
				}
				if !allowed {
					continue
				}
			}
			files = append(files, item)
		}
	}

	// ÊéíÂ∫è
	sort.Slice(dirs, func(i, j int) bool {
		return dirs[i].Name < dirs[j].Name
	})
	sort.Slice(files, func(i, j int) bool {
		return files[i].Name < files[j].Name
	})

	// ÂêàÂπ∂ÁõÆÂΩïÂíåÊñá‰ª∂
	fp.items = append(fp.items, dirs...)
	if fp.mode != FilePickerModeDir {
		fp.items = append(fp.items, files...)
	}

	// ÈáçÁΩÆÈÄâÊã©Á¥¢Âºï
	if fp.selectedIdx >= len(fp.items) {
		fp.selectedIdx = 0
	}
}

// Update Êõ¥Êñ∞Áä∂ÊÄÅ
func (fp *FilePicker) Update(msg tea.Msg) tea.Cmd {
	if !fp.visible {
		return nil
	}

	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		fp.SetSize(msg.Width, msg.Height)

	case tea.KeyMsg:
		switch msg.String() {
		case "esc":
			// ÂèñÊ∂àÈÄâÊã©
			fp.Hide()
			return func() tea.Msg {
				return filePickerResultMsg{Selected: false}
			}

		case "up", "k":
			if fp.selectedIdx > 0 {
				fp.selectedIdx--
			}

		case "down", "j":
			if fp.selectedIdx < len(fp.items)-1 {
				fp.selectedIdx++
			}

		case "enter", " ":
			if fp.selectedIdx < len(fp.items) {
				item := fp.items[fp.selectedIdx]

				if item.IsDir {
					if item.Name == ".." {
						// ËøîÂõû‰∏äÁ∫ßÁõÆÂΩï
						fp.currentPath = item.Path
					} else {
						// ËøõÂÖ•Â≠êÁõÆÂΩï
						fp.currentPath = item.Path
					}
					fp.loadDirectory()
					fp.selectedIdx = 0
				} else {
					// ÈÄâÊã©Êñá‰ª∂
					fp.Hide()
					return func() tea.Msg {
						return filePickerResultMsg{
							Selected: true,
							Path:     item.Path,
							IsDir:    false,
						}
					}
				}
			}

		case "ctrl+d":
			// ÈÄâÊã©ÂΩìÂâçÁõÆÂΩïÔºà‰ªÖÂú®ÁõÆÂΩïÊ®°Âºè‰∏ãÔºâ
			if fp.mode == FilePickerModeDir || fp.mode == FilePickerModeBoth {
				fp.Hide()
				return func() tea.Msg {
					return filePickerResultMsg{
						Selected: true,
						Path:     fp.currentPath,
						IsDir:    true,
					}
				}
			}

		case "ctrl+h":
			// ÂàáÊç¢ÊòæÁ§∫ÈöêËóèÊñá‰ª∂
			fp.showHidden = !fp.showHidden
			fp.loadDirectory()

		case "home":
			// ÂõûÂà∞Áî®Êà∑‰∏ªÁõÆÂΩï
			if homeDir, err := os.UserHomeDir(); err == nil {
				fp.currentPath = homeDir
				fp.loadDirectory()
				fp.selectedIdx = 0
			}
		}
	}

	return nil
}

// View Ê∏≤ÊüìËßÜÂõæ
func (fp *FilePicker) View() string {
	if !fp.visible {
		return ""
	}

	// ËÆ°ÁÆóÂØπËØùÊ°ÜÂ§ßÂ∞è
	dialogWidth := fp.width * 3 / 4
	if dialogWidth < 60 {
		dialogWidth = 60
	}
	if dialogWidth > 100 {
		dialogWidth = 100
	}

	dialogHeight := fp.height * 3 / 4
	if dialogHeight < 20 {
		dialogHeight = 20
	}
	if dialogHeight > 30 {
		dialogHeight = 30
	}

	// ÂØπËØùÊ°ÜÊ†∑Âºè
	dialogStyle := lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("#7D56F4")).
		Padding(1).
		Width(dialogWidth).
		Height(dialogHeight).
		Background(lipgloss.Color("#1e1e1e"))

	// Ê†áÈ¢òÊ†∑Âºè
	titleStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("#7D56F4")).
		Padding(0, 0, 1, 0)

	// Ë∑ØÂæÑÊ†∑Âºè
	pathStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("240")).
		Padding(0, 0, 1, 0)

	// ÈÄâ‰∏≠È°πÊ†∑Âºè
	selectedStyle := lipgloss.NewStyle().
		Background(lipgloss.Color("#7D56F4")).
		Foreground(lipgloss.Color("#FAFAFA")).
		Padding(0, 1)

	// ÊôÆÈÄöÈ°πÊ†∑Âºè
	normalStyle := lipgloss.NewStyle().
		Padding(0, 1)

	// ÁõÆÂΩïÊ†∑Âºè
	dirStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("39")).
		Padding(0, 1)

	// ÊûÑÂª∫ÂÜÖÂÆπ
	var content strings.Builder

	// Ê†áÈ¢ò
	content.WriteString(titleStyle.Render(fp.title))
	content.WriteString("\n")

	// ÂΩìÂâçË∑ØÂæÑ
	content.WriteString(pathStyle.Render("üìÅ " + fp.currentPath))
	content.WriteString("\n")

	// Êñá‰ª∂ÂàóË°®
	listHeight := dialogHeight - 8 // ÂáèÂéªÊ†áÈ¢ò„ÄÅË∑ØÂæÑ„ÄÅÂ∏ÆÂä©Á≠âÂç†Áî®ÁöÑË°åÊï∞
	startIdx := 0
	endIdx := len(fp.items)

	// Â¶ÇÊûúÂàóË°®Â§™ÈïøÔºåÂè™ÊòæÁ§∫ÂΩìÂâçÈÄâÊã©È°πÂë®Âõ¥ÁöÑÂÜÖÂÆπ
	if len(fp.items) > listHeight {
		startIdx = fp.selectedIdx - listHeight/2
		if startIdx < 0 {
			startIdx = 0
		}
		endIdx = startIdx + listHeight
		if endIdx > len(fp.items) {
			endIdx = len(fp.items)
			startIdx = endIdx - listHeight
			if startIdx < 0 {
				startIdx = 0
			}
		}
	}

	for i := startIdx; i < endIdx; i++ {
		item := fp.items[i]

		var icon, name string
		if item.IsDir {
			if item.Name == ".." {
				icon = "‚Üë"
				name = item.Name
			} else {
				icon = "üìÅ"
				name = item.Name
			}
		} else {
			icon = "üìÑ"
			name = item.Name
		}

		line := fmt.Sprintf("%s %s", icon, name)

		if i == fp.selectedIdx {
			content.WriteString(selectedStyle.Render("‚ñ∂ " + line))
		} else if item.IsDir {
			content.WriteString(dirStyle.Render("  " + line))
		} else {
			content.WriteString(normalStyle.Render("  " + line))
		}
		content.WriteString("\n")
	}

	// Ê∑ªÂä†Á©∫Ë°åÂ°´ÂÖÖ
	for i := endIdx - startIdx; i < listHeight; i++ {
		content.WriteString("\n")
	}

	// Â∏ÆÂä©‰ø°ÊÅØ
	helpStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("240")).
		Padding(1, 0, 0, 0)

	var helpText string
	switch fp.mode {
	case FilePickerModeFile:
		helpText = "‚Üë/‚Üì ÂØºËà™ | Enter ÈÄâÊã©Êñá‰ª∂/ËøõÂÖ•ÁõÆÂΩï | ESC ÂèñÊ∂à"
	case FilePickerModeDir:
		helpText = "‚Üë/‚Üì ÂØºËà™ | Enter ËøõÂÖ•ÁõÆÂΩï | Ctrl+D ÈÄâÊã©ÂΩìÂâçÁõÆÂΩï | ESC ÂèñÊ∂à"
	case FilePickerModeBoth:
		helpText = "‚Üë/‚Üì ÂØºËà™ | Enter ÈÄâÊã©/ËøõÂÖ• | Ctrl+D ÈÄâÊã©ÂΩìÂâçÁõÆÂΩï | ESC ÂèñÊ∂à"
	}
	helpText += " | Ctrl+H ÊòæÁ§∫ÈöêËóèÊñá‰ª∂ | Home ÂõûÂà∞‰∏ªÁõÆÂΩï"

	content.WriteString(helpStyle.Render(helpText))

	// Â±Ö‰∏≠ÊòæÁ§∫ÂØπËØùÊ°Ü
	return lipgloss.Place(
		fp.width, fp.height,
		lipgloss.Center, lipgloss.Center,
		dialogStyle.Render(content.String()),
	)
}

// GetResult Ëé∑ÂèñÈÄâÊã©ÁªìÊûúÔºàÁî®‰∫éÂ§ÑÁêÜfilePickerResultMsgÔºâ
func GetFilePickerResult(msg tea.Msg) (FilePickerResult, bool) {
	if result, ok := msg.(filePickerResultMsg); ok {
		return FilePickerResult(result), true
	}
	return FilePickerResult{}, false
}
